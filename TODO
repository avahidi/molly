
TODO
====


* create an interface for Error/Warning/Log generation
  - append warnings to Input (errors and logs are already being recorded)


* better error messages in operations. for example this can panic
   m := o.(*Number) // ../prim/binary.go

but if we change it to
   m, valid := o.(*Number)
   if ! valid { return someError }

the error will be discarded as normal scaning failure. We need a better method
to support this. maybe a 2nd pass sanity check in the scanner?


* add special variable to help setting indexes. For example
 var a = Long(10);
 var b = String(14, 10);
 var c = Long(24);

should be simpified to

 var a = Long(10);
 var b = String(?, 10);
 var c = Long(?);


 * Simplify FileSystem now that we have types.Molly

* generate reports in different formats (json, xml, csv, text)

* Lazy evaluation of binary operations (e.f. TRUE || x will not need to evaluate x)

* DONE: record file extraction hierachy
  - TODO: make sure children are stored with parents if they are container formats


 * add support for decompressors:
    - DONE: TAR, ZIP, zpio
    - TODO: bz, gz



 * add function calls
   - conversion functions, eg int(), uint64(), string()
   - len() or sizeof()
   - DONE: string functions
   - DONE crc and hash functions
   - a select function to select between two EXPRESSIONS (not values?)
   x = select( a == 23, a, b)

DONE
====
* scan streams (mostly for testing)
* add enviorment variables (endianendianness, file size, file lengt, ...) to class/scope/envioment?
* add string expressions
* add unary operations
* add logic operations

* add better action support
    * add proper printf support to echo action
    * add extract action

 * run minimizer on expressions before saving them?

 * add parsing code....
  * ....
* callback API for when a match is found
   - callback API for when a new file is created

   - (as action) inject new file into the scanned set
   - get name for a new file

* export matches to json/whatever
* better error messages when scanning files (errors put in Report)
* fix input set so it doesn't depend on filewalk and search dirs only on pop

* quit when an unknown variable is seen

* Lazy extaction of variables in a class

* decoding of strings:
  * DONE: \\, \t, \n \r
  * DONE: octal \nnn
  * DONE: hex \xnn

* DONE: add a global log / error manager


* structure to create reports from a central location
   - set output directory
   - create stand-alone files
   - create files associated with a scanned binary


* structure to create reports
  - generate reports from analyzer actions
* use hierarchy from FileQueue instead of building it separatly in Report
* set some sort of max depth for filequeue

* add {newfile} and {newdir} to system() action